package src.com.recursion;
/*
 * This Expains the Search of pattern in text in O(n)
 */
public class FindPatternInText {
	public int checkIfExists(char[] text, char[] pattern) {
		int index = 0;
		int[] lps = new int[pattern.length];
		createPrefixSuffixArray(pattern, lps);
		int i = 0;
		int j = 0;
		int textLength = text.length;
		while (i < textLength) {
			if (pattern[j] == text[i]) {
				j++;
				i++;
			}
			if (j == pattern.length)
				return i - j;
			else if (i < textLength && pattern[j] != text[i]) {
				if (j != 0) {
					j = lps[j - 1];
				} else {
					i++;
				}
			}
		}
		return index;
	}

	private void createPrefixSuffixArray(char[] pattern, int[] lps) {
		lps[0] = 0;
		int index = 0;
		int i = 1;
		while (i < pattern.length) {
			if (pattern[i] == pattern[index]) {
				lps[i] = index;
				i++;
				index++;
			} else {
				if (index != 0) {
					index = lps[index - 1];
				} else {
					lps[i] = 0;
					i++;
				}
			}
		}
	}
	public static void main(String args[]) {
		String text = "ABABDABACDABABCABAB";
		String pattern = "ABABCABAB";
		System.out.println("Point where the pattern match starts is "
				+ new FindPatternInText().checkIfExists(text.toCharArray(), pattern.toCharArray()));
	}
}
