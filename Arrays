
package beta.array;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class PlayWithArray {

1. using HashMap
	public void resolveDuplicate(int[] arr) {
		Map<Integer, Integer> m = new HashMap<Integer, Integer>();
		Set st = new HashSet<Integer>();
		int count = 1;
		for (int i = 0; i < arr.length - 1; i++) {
			st.add(arr[i]);
		}

		Iterator<Integer> t = st.iterator();
		while (t.hasNext()) {
			System.out.print(" " + t.next() + " ");
		}
	}
	
	
2. using Boolean Array	
	public void findDuplicates(int[] arr) {
		int min = arr[0];
		int max = arr[1];
		if (min > max) { // O(1)
			int t = max;
			max = min;
			min = t;
		}

		boolean temp[] = new boolean[arr.length];
		for (int i = 0; i < arr.length; i++) {// O(n)
			if (temp[arr[i] - min] == false) {
				temp[arr[i] - min] = true;
			} else {
				System.out.println(" ----> " + arr[i]);
			}
		}
	}


3. /******************************** TO DO : same in O(n) time and O(1) space complexity***************/
	
	
	/************ alternative to sort the list and find diff between consecutive ==1 ******  O(nlogn)********/

boolean checkIfArrayHasConsecutive(int[] arr) {
		int min = arr[0];
		int max = arr[1];
		if (min > max) { // O(1)
			int t = max;
			max = min;
			min = t;
		}
		for (int i = 0; i < arr.length; i++) {// O(n)
			if (arr[i] > max)
				max = arr[i];
			if (arr[i] < min)
				min = arr[i];
		}
		boolean temp[] = new boolean[arr.length];
		for (int i = 0; i < arr.length; i++) {// O(n)
			if (temp[arr[i] - min] == false) {
				temp[arr[i] - min] = true;
			} else
				return false;
		}
		if ((max - min + 1) != arr.length)
			return false;
		return true;
	}


/*	boolean checkIfConsecutive(int[] arr) {
		int min = Integer.MAX_VALUE;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] < min) {
				min = arr[i];
			}
		}

		for (int i = 0; i < arr.length; i++) {
			if (Math.abs(arr[i]) - min >= arr.length)
				return false;
			if (Math.abs(arr[i]) - min < 0)
				return false;
			arr[Math.abs(arr[i]) - min] = -arr[Math.abs(arr[i]) - min];
		}

		for (int i = 0; i < arr.length; i++) {
			arr[i] = Math.abs(arr[i]);
		}
		return true;
	}
*/
	public static void main(String args[]) {

		int[] arr = { 1, 2, 3, 4, 5, 7 };

		System.out.println(" Check if consecutiver " + new PlayWithArray().checkIfConsecutive(arr));

	}
}
