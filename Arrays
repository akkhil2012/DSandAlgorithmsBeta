
package beta.array;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class PlayWithArray {

1. using HashMap
	public void resolveDuplicate(int[] arr) {
		Map<Integer, Integer> m = new HashMap<Integer, Integer>();
		Set st = new HashSet<Integer>();
		int count = 1;
		for (int i = 0; i < arr.length - 1; i++) {
			st.add(arr[i]);
		}

		Iterator<Integer> t = st.iterator();
		while (t.hasNext()) {
			System.out.print(" " + t.next() + " ");
		}
	}
	
	
2. using Boolean Array	
	public void findDuplicates(int[] arr) {
		int min = arr[0];
		int max = arr[1];
		if (min > max) { // O(1)
			int t = max;
			max = min;
			min = t;
		}

		boolean temp[] = new boolean[arr.length];
		for (int i = 0; i < arr.length; i++) {// O(n)
			if (temp[arr[i] - min] == false) {
				temp[arr[i] - min] = true;
			} else {
				System.out.println(" ----> " + arr[i]);
			}
		}
	}


3. /******************************** TO DO : same in O(n) time and O(1) space complexity***************/
	
	
	/************ alternative to sort the list and find diff between consecutive ==1 ******  O(nlogn)********/

boolean checkIfArrayHasConsecutive(int[] arr) {
		int min = arr[0];
		int max = arr[1];
		if (min > max) { // O(1)
			int t = max;
			max = min;
			min = t;
		}
		for (int i = 0; i < arr.length; i++) {// O(n)
			if (arr[i] > max)
				max = arr[i];
			if (arr[i] < min)
				min = arr[i];
		}
		boolean temp[] = new boolean[arr.length];
		for (int i = 0; i < arr.length; i++) {// O(n)
			if (temp[arr[i] - min] == false) {
				temp[arr[i] - min] = true;
			} else
				return false;
		}
		if ((max - min + 1) != arr.length)
			return false;
		return true;
	}


/*	boolean checkIfConsecutive(int[] arr) {
		int min = Integer.MAX_VALUE;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] < min) {
				min = arr[i];
			}
		}

		for (int i = 0; i < arr.length; i++) {
			if (Math.abs(arr[i]) - min >= arr.length)
				return false;
			if (Math.abs(arr[i]) - min < 0)
				return false;
			arr[Math.abs(arr[i]) - min] = -arr[Math.abs(arr[i]) - min];
		}

		for (int i = 0; i < arr.length; i++) {
			arr[i] = Math.abs(arr[i]);
		}
		return true;
	}
*/
/*********** Find Median of running stream of integers ****************** using BTree and Head************ TO DO ***/
public int medianOfUnsortedArray(int[] arr){
		int length = arr.length;
		Arrays.sort(arr);
		if(length%2==0){
			return (arr[(length-2)/2]+arr[(length)/2])/2;
		}else{
			return arr[(length-1)/2];
		}
	}
	
	
	/***************************************************************/
	public static void main(String args[]) {

		int[] arr = { 1, 2, 3, 4, 5, 7 };

		System.out.println(" Check if consecutiver " + new PlayWithArray().checkIfConsecutive(arr));

	}
}
/*****************************************************************************************/


/************************** TO DO ********** in O(n) time and O(1) space complexity *****************/

public int maxOccuringIntegsers(int[] arr){
		int count[] = new int[arr.length];// as the input values are constrained to be within range till arr length
		for(int i=0;i<arr.length;i++){
			count[arr[i]]++;
		}
		int max=0;
		for(int i=0;i<count.length;i++){
			if(count[i]>max)
				max = i;
		}
		return max;
	}

/******************** Find top kth item : TRICKLE DOWN LEFT ************TO DO********************/
/*
  Build Max Heap is O(n) and Extract Max is O(nlogn)
*/
public int findiTHLargestNumber(int[] arr, int k) {
		MaxHeap maxHeap = new MaxHeap(arr);
		for (int element : arr) {
			maxHeap.insertElement(element);
			// maxHeap.displayHeap();

			maxHeap.percolationUp(maxHeap.currentSize++);

		}
		System.out.println(" ");
		System.out.println(" After percolation UP");
		System.out.println(" ");
		maxHeap.displayHeap();

		for (int i = 0; i < k; i++) {
			maxHeap.extractMax(maxHeap);
		}

		return 0;
	}
	
	
	
	
	class MaxHeap{
		
		int currentSize=0;
		int maxSize=30;
		int[] heapArray;
		
		MaxHeap(int[] arr){
			heapArray = new int[arr.length];
		}
		
		
		void insertElement(int element){
			heapArray[currentSize] = element;
		}
		
		void displayHeap(){
			for(int hElement : heapArray)
				System.out.print(" ----- > " + hElement);
		}
		
		void percolationUp(int index){
			int bottom = heapArray[index];
			int parent = (index - 1)/2;
			
			//int temp = heapArray[element];
			while(index>0 && heapArray[parent] < bottom){
				heapArray[index] = heapArray[parent];
				index = parent;
				parent = (parent -1)/2;
			}
			heapArray[index] = bottom;
		}
		
		
		int extractMax(MaxHeap maxHeap) {
			System.out.println("====BEFORE ===> " + maxHeap.heapArray[0]);
			int bottom = maxHeap.heapArray[heapArray.length - 1];
			maxHeap.heapArray[0] = bottom;
			--maxHeap.currentSize;
			for (int i = 0; i < maxHeap.currentSize; i++) {
				System.out.println("====**===> " + maxHeap.heapArray[i]);
			}
			trickleDown(0);
			return heapArray[0];
		}
		
		
		public void trickleDown(int index){
			while(index < heapArray.length/2){
				int leftChild = heapArray[2*index+1];
				int rightChild = heapArray[2*index+2];
				if(leftChild < heapArray[index]  && rightChild <  heapArray[index]){
					return;
				}else if(leftChild > heapArray[index]){
					
				}else{
					
				}
			}
		}
	}
	
	
/********************************************************************************************/

/******************* Merge list of arrays ***********************/
/*************************************/
