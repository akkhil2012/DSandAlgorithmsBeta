/*

*/

private boolean checkIfSubTree(Node<Integer> root1,Node<Integer> root2){
		  if(root1 == null && root2 == null){
			  return true;
		  }
		  
		  if(root1 != null || root2 != null){
			  return false;
		  }
		  
		
		 if(root1.data == root2.data){
			return checkIfSubTree(root1.left, root2.left) && checkIfSubTree(root1.right, root2.right);
		 }
		return false;
		
	}
	
	public boolean isTreeSubTreeOfOther(Node<Integer> root1, Node<Integer> root2){
		
		if(root1==null) return true;// Assuming root1 as root of small tree
		if(root2==null) return false;
		
		if(root1.data == root2.data){
			if(checkIfSubTree(root1, root2)){
				return true;
			}
		}
		return isTreeSubTreeOfOther(root1, root2.left) || isTreeSubTreeOfOther(root1, root2.right);
	}
	
